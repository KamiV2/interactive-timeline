{"version":3,"sources":["TestSlider.js","App.js","index.js"],"names":["scaler","value","Math","round","TestSlider","_ref","min","max","step","defaultValue","onChange","setValue","useState","showIntro","setShowIntro","useEffect","React","createElement","Popup","open","modal","nested","closeOnDocumentClick","onClose","style","background","width","height","fontSize","position","top","left","display","flexDirection","alignItems","justifyContent","borderRadius","className","onClick","padding","intro","text","map","t","id","Slider","val","renderThumb","props","state","Object","assign","marginTop","backgroundColor","cursor","snapDragDisabled","fontFamily","fontWeight","toString","MapComponent","ComposableMap","projection","projectionConfig","scale","center","Geographies","geography","data","_ref2","geographies","geo","Geography","key","rsmKey","fill","stroke","strokeWidth","default","outline","hover","pressed","info","inf","markermap","year","startyear","endyear","Marker","name","coordinates","lon","lat","trigger","r","color","close","overflow","textAnchor","dy","sliderval","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f0377497.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Slider from 'react-slider';\nimport { ComposableMap, Geographies, Geography, Marker } from 'react-simple-maps';\nimport data from './geo.json';\nimport info from './info.json';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\nimport intro from './intro.json';\n\nconst scaler = (value) => {\n  const a = 0.00073701;\n  const b = -0.398161;\n  const c = 57.5219610775 + 0.16;\n  return Math.round(a * value * value * value + b * value * value + c * value - 500);\n}\n\nconst TestSlider = ({ min, max, step, defaultValue, onChange }) => {\n  const [value, setValue] = useState(defaultValue);\n  const [showIntro, setShowIntro] = useState(false);\n\n  useEffect(() => {\n    setShowIntro(true); // Show intro popup on component mount\n  }, []);\n\n  const handleSliderChange = (val) => {\n    setValue(val);\n    if (onChange) {\n      onChange(val);\n    }\n  };\n\n  const renderThumb = (props, state) => (\n    <div {...props} style={{ ...props.style, marginTop: '2px', height: '20px', width: '8px', backgroundColor: 'blue', cursor: 'grab'}}>\n    </div>\n  );\n// TODO: handle image refs in JSON.\n  const markermap = (inf, year) => {\n    if (inf.startyear <= year && inf.endyear >= year) {\n      return (\n        <Marker\n          className='marker'\n          key={inf.name}\n          coordinates={[inf.lon, inf.lat]}\n          fill=\"#777\"\n        >\n          <Popup\n            trigger={\n              <circle r={3} fill={inf.color} style={{ cursor: 'pointer' }} />\n            }\n            modal\n            nested\n            closeOnDocumentClick\n          >\n            {close => (\n              <div style={{background: \"#ffeecc\", width: \"90vw\", height: \"90vh\", fontSize: \"18px\", position: \"fixed\", top: \"5vh\", left: \"5vh\", display: 'flex', flexDirection: 'column', alignItems: 'left', justifyContent: 'center',\n              borderRadius: \"48px\"}}>\n                <button className='popupclose' onClick={close}>&times;</button>\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', height: '100%', padding: \"5vh\", overflow: \"auto\"}}>\n                <h1>{inf.name}</h1> \n                {inf.text.map((t) => (\n                  <p>{t}</p>\n                ))}\n              </div>\n              </div>\n            )}\n          </Popup>\n          <text textAnchor=\"middle\" dy=\"-12px\" fill=\"#000000\" id=\"markertext\" fontSize=\"12px\">\n            {inf.name}\n          </text>\n        </Marker>\n        // </div>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const MapComponent = () => {\n    const mapStyle = {\n      width: '100%',\n      height: '85vh'\n    };\n    const mapProjectionConfig = {\n      scale: 250,\n      center: [120, 10], // Centered around Eastern Asia\n    };\n\n    return (\n      <div id=\"map\">\n        <ComposableMap projection=\"geoMercator\" projectionConfig={mapProjectionConfig}>\n          <Geographies geography={data}>\n            {({ geographies }) =>\n              geographies.map((geo) => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill=\"rgba(38,50,56,0.2)\"\n                  stroke=\"#000000\"\n                  strokeWidth={0.05}\n                  style={{\n                    default: { outline: \"none\" },\n                    hover: { outline: \"none\" },\n                    pressed: { outline: \"none\" },\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n          {info.map((inf) => markermap(inf, scaler(value)))}\n        </ComposableMap>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      {showIntro && (\n        <Popup\n          open\n          modal\n          nested\n          closeOnDocumentClick={false}\n          onClose={() => setShowIntro(false)}\n        >\n          <div style={{background: \"#ffeecc\", width: \"90vw\", height: \"90vh\", fontSize: \"18px\", position: \"fixed\", top: \"5vh\", left: \"5vh\", display: 'flex', flexDirection: 'column', alignItems: 'left', justifyContent: 'center',\n              borderRadius: \"48px\"}}>\n            <button className='popupclose' onClick={() => setShowIntro(false)}>&times;</button>\n            <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', height: '100%', padding: \"5vh\"}}>\n              <h1>Introduction</h1>\n              {intro.text.map((t) => (\n                <p>{t}</p>\n              ))}\n              </div>\n          </div>\n        </Popup>\n      )}\n      <div id=\"slider-cont\">\n        <Slider\n          min={min}\n          max={max}\n          step={step}\n          value={value}\n          onChange={handleSliderChange}\n          renderThumb={renderThumb}\n          snapDragDisabled={true}\n        />\n        <div style={{fontFamily: \"Baskerville\", padding: \"4px\", fontSize: \"24px\", fontWeight: \"600\"}}>Year:  {scaler(value) > 0 ? scaler(value).toString() + \" AD\" : (-scaler(value)).toString() + \" BC\"}</div>\n      </div>\n      <MapComponent />\n    </div>\n  );\n};\n\nexport default TestSlider;\n","import './App.css';\n\nimport React, { useState } from 'react';\nimport Slider from './TestSlider';\nlet sliderval = 0;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='title'>\n        <h1> Interactive Timeline of Buddhist Imperialism </h1>\n      </div>\n      <div className=\"slidecontainer\">\n       <Slider min={0}\n          max={100}\n          step={0.5}\n          defaultValue={sliderval}\n          onChange={(val) => {\n            sliderval = val;\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}